{
    "filename": "script.js",
    "language": "javascript",
    "content": "document.addEventListener('alpine:init', () => {\n    Alpine.data('newsFeed', () => ({\n        // IMPORTANT: Replace 'YOUR_API_KEY' with your actual NewsAPI key\n        // Get one for free at https://newsapi.org/\n        apiKey: '38e9949744fa422383b4944c15a3f9b9', \n        articles: [],\n        loading: true,\n        error: '',\n\n        fetchNews() {\n            this.loading = true;\n            this.error = '';\n            const url = `https://newsapi.org/v2/top-headlines?country=us&pageSize=21&apiKey=${this.apiKey}`;\n\n            if (this.apiKey === 'YOUR_API_KEY') {\n                this.error = 'Please replace YOUR_API_KEY in script.js with your actual NewsAPI key.';\n                this.loading = false;\n                console.error(this.error);\n                return;\n            }\n\n            fetch(url)\n                .then(response => {\n                    if (!response.ok) {\n                        return response.json().then(err => { throw new Error(err.message || `HTTP error! status: ${response.status}`) });\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    if (data.status === 'ok') {\n                        this.articles = data.articles;\n                    } else {\n                        throw new Error(data.message || 'Failed to fetch news');\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching news:', error);\n                    this.error = `Failed to load news: ${error.message}. Check API key and network.`;\n                })\n                .finally(() => {\n                    this.loading = false;\n                });\n        },\n\n        // Simple placeholder for headline transformation\n        transformHeadline(headline) {\n            // Very basic \"brain rot speak\" placeholders - expand this significantly!\n            const transformations = [\n                (s) => `${s} lol`, \n                (s) => `Bruh, ${s}`, \n                (s) => `Is it just me or is ${s} kinda crazy?`,\n                (s) => `${s} ðŸ’€`,\n                (s) => `Big news: ${s.toLowerCase()} apparently.`,\n                (s) => `Wait, ${s}? No way. ðŸ§¢`\n            ];\n            // Apply a random transformation\n            const randomIndex = Math.floor(Math.random() * transformations.length);\n            try {\n              return transformations[randomIndex](headline);\n            } catch (e) {\n              return headline; // Fallback if transformation fails\n            }\n        }\n    }));\n});\n\n// Share button functionality\ndocument.addEventListener('DOMContentLoaded', () => {\n    const shareBtn = document.getElementById('shareBtn');\n    if(shareBtn) {\n        shareBtn.addEventListener('click', () => {\n            if (navigator.share) {\n                navigator.share({\n                    title: 'Check out this Mews Feed!',\n                    text: 'See the latest news, meme-style!',\n                    url: window.location.href\n                }).then(() => {\n                    console.log('Thanks for sharing!');\n                }).catch(console.error);\n            } else {\n                // Fallback for browsers that don't support navigator.share\n                navigator.clipboard.writeText(window.location.href).then(() => {\n                    alert('Feed URL copied to clipboard!');\n                }).catch(err => {\n                    alert('Could not copy URL. Please copy it manually.');\n                    console.error('Failed to copy URL: ', err);\n                });\n            }\n        });\n    }\n});\n\n// Simple placeholder image if real image fails to load\n// The @error directive in Alpine handles this more elegantly now,\n// but this is a fallback/alternative.\n/*\ndocument.addEventListener('error', (event) => {\n    if (event.target.tagName === 'IMG') {\n        event.target.src = 'placeholder.png';\n    }\n}, true); // Use capture phase\n*/\n\n// Note: Create a simple 'placeholder.png' image file (e.g., a gray box)\n// in the same directory for the image error handling to work visually."
  },
  {
    "filename": "placeholder.png",
    "language": "binary",
    "content": "iVBORw0KGgoAAAANSUhEUgAAASwAAACoCAMAAABt9SM9AAAAA1BMVEX///+nxBvIAAAASElEQVR4nO3BMQEAAADCoPVPbQ0PoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+BsXoAAG1flnbAAAAAElFTkSuQmCC"
  }
